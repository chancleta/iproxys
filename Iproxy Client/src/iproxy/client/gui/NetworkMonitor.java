/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package iproxy.client.gui;

import com.iproxys.connectivity.ServerComunication;
import com.iproxys.interfaces.ArrivalDataBeanRemote;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Date;
import javax.swing.Timer;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;

public class NetworkMonitor extends java.awt.Dialog {

    /**
     * Creates new form NetworkMonitor
     */
    public static TimeSeries pop = null;
    public static TimeSeriesCollection dataset;
    public static JFreeChart chart;
    public static ChartPanel chartpanel;
    public static ActionListener timerta = new ActionListener() {

        ServerComunication instance = null;

        @Override
        public void actionPerformed(ActionEvent ae) {
            
                instance = ServerComunication.getInstance();
                if (instance != null) {
                    ArrivalDataBeanRemote arrivalDataBean = instance.getArrivalDataBean();
                    if (arrivalDataBean != null) {
                        pop.add(new Millisecond(new Date()), arrivalDataBean.NetworkMonitor());
                        
                    } else {
                        System.err.println("seugndo");
                    }

                } else {
                    System.err.println("primero");
                }
            }
        
    };
    public static Timer timer;

    public NetworkMonitor(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initJChart();
        if(timer == null){
            timer = new Timer(1000, timerta);
            timer.start();
        
        }

    }

    private void initJChart() {
        if (pop == null) {
            pop = new TimeSeries("COnsumo de Ancho de Banda - KB");
        }
        if (dataset == null) {
            dataset = new TimeSeriesCollection();
            dataset.addSeries(pop);
        }
        if (chart == null) {
            chart = ChartFactory.createTimeSeriesChart(
                    "Monitoreo de Ancho de Banda",
                    "Tiempo",
                    "Consumo (KiloBytes)",
                    dataset,
                    true,
                    true,
                    false);
        }
        chart.setBorderVisible(true);
        if (chartpanel == null) {
            chartpanel = new ChartPanel(chart);

        }
        netMonPanel.add(chartpanel);
        netMonPanel.setSize(chartpanel.getSize());



    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        netMonPanel = new javax.swing.JPanel();

        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        netMonPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(netMonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(netMonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        pop.clear();
        

        //timerta.cancel();
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                NetworkMonitor dialog = new NetworkMonitor(new java.awt.Frame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel netMonPanel;
    // End of variables declaration//GEN-END:variables
}
