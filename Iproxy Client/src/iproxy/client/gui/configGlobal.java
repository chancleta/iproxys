/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package iproxy.client.gui;

import com.iproxys.connectivity.ServerComunication;
import com.iproxys.interfaces.UnblockableManageBeanRemote;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.ListSelectionModel;

/**
 *
 * @author Edgar Omar
 */
public class configGlobal extends javax.swing.JDialog {

    /**
     * Creates new form configGlobal
     */
    private DefaultListModel ipUnblockModel;

    public configGlobal(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        
        ipUnblockModel = new DefaultListModel();
        ServerComunication instance = ServerComunication.getInstance();
        if (instance != null) {
            UnblockableManageBeanRemote UnblockableManageBean = instance.UnblockableManageBean();
            if (UnblockableManageBean != null) {
              //  systemPassword.setText(UnblockableManageBean.getSystemPassword());
                List<String> allIP = UnblockableManageBean.getAllIP();
                for (String ipnew : allIP) {
                    ipUnblockModel.addElement(ipnew);
                }
            } else {
                ShowMessages.ShowErrorMessage("No se Pudo Contactar el servidor", "Iproxys : Mensaje de Notificacion", this);

            }
        } else {
            ShowMessages.ShowErrorMessage("No se Pudo Contactar el servidor", "Iproxys : Mensaje de Notificacion", this);

        }
        initComponents();

        ipList.setSelectionMode(
                ListSelectionModel.SINGLE_SELECTION);


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ipList = new javax.swing.JList(ipUnblockModel);
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        addUnblockableIP = new javax.swing.JButton();
        deleteIP = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(null);

        jLabel2.setFont(new java.awt.Font("Perpetua Titling MT", 1, 24)); // NOI18N
        jLabel2.setText("CONFIGURACIÓN GLOBAL");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(10, 10, 350, 40);

        jLabel4.setFont(new java.awt.Font("Perpetua", 1, 18)); // NOI18N
        jLabel4.setText("Direcciones IP - No Bloquear");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(30, 120, 300, 20);

        jPanel2.setLayout(null);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iproxy/client/gui/images/back.png"))); // NOI18N
        jButton3.setContentAreaFilled(false);
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3);
        jButton3.setBounds(20, 170, 40, 40);

        ipList.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jScrollPane1.setViewportView(ipList);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(20, 10, 280, 150);

        jLabel8.setFont(new java.awt.Font("Perpetua Titling MT", 1, 12)); // NOI18N
        jLabel8.setText("AGREGAR");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(130, 220, 70, 15);

        jLabel9.setFont(new java.awt.Font("Perpetua Titling MT", 1, 12)); // NOI18N
        jLabel9.setText("ELIMINAR");
        jPanel2.add(jLabel9);
        jLabel9.setBounds(240, 220, 70, 15);

        jLabel5.setFont(new java.awt.Font("Perpetua Titling MT", 1, 12)); // NOI18N
        jLabel5.setText("ATRÁS");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(20, 220, 50, 15);

        addUnblockableIP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iproxy/client/gui/images/add_user.jpg"))); // NOI18N
        addUnblockableIP.setContentAreaFilled(false);
        addUnblockableIP.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addUnblockableIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUnblockableIPActionPerformed(evt);
            }
        });
        jPanel2.add(addUnblockableIP);
        addUnblockableIP.setBounds(140, 170, 50, 40);

        deleteIP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iproxy/client/gui/images/Agt_icon.png"))); // NOI18N
        deleteIP.setContentAreaFilled(false);
        deleteIP.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteIPActionPerformed(evt);
            }
        });
        jPanel2.add(deleteIP);
        deleteIP.setBounds(240, 170, 60, 40);

        jPanel1.add(jPanel2);
        jPanel2.setBounds(20, 160, 314, 250);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        //  mainFrame.user.setVisible(false);
   }//GEN-LAST:event_jButton3ActionPerformed

    private void addUnblockableIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUnblockableIPActionPerformed
        // TODO add your handling code here:
        AddUnblockIP unblockDialog = new AddUnblockIP(null, rootPaneCheckingEnabled);
        unblockDialog.setLocationRelativeTo(this);
        unblockDialog.setVisible(true);
        if (unblockDialog.getReturnStatus() == 1) {
            this.setEnabled(false);
            ServerComunication instance = ServerComunication.getInstance();

            if (instance != null) {
                UnblockableManageBeanRemote UnblockableManageBean = instance.UnblockableManageBean();
                if (UnblockableManageBean != null) {
                    if (unblockDialog.ip.length() >= 8) {
                        if (UnblockableManageBean.Insert(unblockDialog.ip)) {
                            ShowMessages.ShowSucessMessage("Se ha agregado la ip con exito", "Iproxys : Mensaje de Notificacion", this);
                            ipUnblockModel.removeAllElements();
                            List<String> allIP = UnblockableManageBean.getAllIP();
                            for (String ipnew : allIP) {
                                ipUnblockModel.addElement(ipnew);
                            }
                        } else {
                            ShowMessages.ShowErrorMessage("No se Pudo agregar la ip, Verifique que no se encuentre en la lista", "Iproxys : Mensaje de Notificacion", this);

                        }
                    } else {
                        ShowMessages.ShowErrorMessage("No se Pudo agregar la ip, Verifique la sintaxis", "Iproxys : Mensaje de Notificacion", this);

                    }
                } else {
                    ShowMessages.ShowErrorMessage("No se Pudo Contactar el servidor", "Iproxys : Mensaje de Notificacion", this);

                }
            } else {
                ShowMessages.ShowErrorMessage("No se Pudo Contactar el servidor", "Iproxys : Mensaje de Notificacion", this);

            }
            this.setEnabled(true);
        }
    }//GEN-LAST:event_addUnblockableIPActionPerformed

    private void deleteIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteIPActionPerformed
        // TODO add your handling code here:
        int selectedIndex = ipList.getSelectedIndex();

        if (selectedIndex == -1) {
            ShowMessages.ShowErrorMessage("Debe Elegir una IP a ser eliminada", "Iproxys Error: Imposible Continuar", this);
        } else {
            ServerComunication instance = ServerComunication.getInstance();
            this.setEnabled(false);

            if (instance != null) {
                UnblockableManageBeanRemote UnblockableManageBean = instance.UnblockableManageBean();
                if (UnblockableManageBean != null) {
                    if (UnblockableManageBean.remove((String) ipUnblockModel.get(ipList.getSelectedIndex()))) {
                        ShowMessages.ShowSucessMessage("Se ha eliminado la ip con exito", "Iproxys : Mensaje de Notificacion", this);
                        ipUnblockModel.removeAllElements();
                        List<String> allIP = UnblockableManageBean.getAllIP();
                        for (String ipnew : allIP) {
                            ipUnblockModel.addElement(ipnew);
                        }
                    } else {
                        ShowMessages.ShowErrorMessage("No se Pudo eliminar la ip", "Iproxys : Mensaje de Notificacion", this);
                    }
                } else {
                    ShowMessages.ShowErrorMessage("No se Pudo Contactar el servidor", "Iproxys : Mensaje de Notificacion", this);

                }
            } else {

                ShowMessages.ShowErrorMessage("No se Pudo Contactar el servidor", "Iproxys : Mensaje de Notificacion", this);

            }
            this.setEnabled(true);

        }
    }//GEN-LAST:event_deleteIPActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(configGlobal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                configGlobal dialog = new configGlobal(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addUnblockableIP;
    private javax.swing.JButton deleteIP;
    private javax.swing.JList ipList;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
